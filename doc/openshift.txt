
INSTALL OKD CONTAINER CENTOS
https://opensource.com/article/18/11/local-okd-cluster-linux


sudo firewall-cmd --permanent --zone okdlocal --add-port 8443/tcp
sudo firewall-cmd --permanent --add-port 8443/tcp
sudo firewall-cmd --permanent --add-port 80/tcp
sudo firewall-cmd --permanent --add-port 443/tcp
sudo firewall-cmd --reload


oc cluster up --public-hostname=192.168.0.201 --host-data-dir /home/root

--routing-suffix=''
--host-data-dir

https://api.starter-us-west-2.openshift.com:443 (openshift)

INSTALL OKD CENTOS
https://opensource.com/article/18/11/local-okd-cluster-linux


EXEMPLO NODEJS
--------------
com template para criacao de tudo

oc new-project nodejs-echo --display-name="nodejs" --description="Sample Node.js app"
oc project nodejs-echo

oc new-app -f /path/to/nodejs.json
oc new-app -f https://github.com/marcioshirai/nodejs-ex/blob/master/openshift/templates/nodejs.json
oc new-app -f https://raw.githubusercontent.com/marcioshirai/nodejs-ex/master/openshift/templates/nodejs.json



oc create -f https://raw.githubusercontent.com/marcioshirai/nodejs-ex/master/openshift/pipeline/Jenkinsfile
 ou
oc create -f https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/pipeline/nodejs-sample-pipeline.yaml


# now create the pipeline build controller from the openshift/pipeline
# subdirectory
oc new-app https://github.com/marcioshirai/nodejs-ex --context-dir=openshift/pipeline --name nodejs-ex-pipeline
    * A pipeline build using source code from https://github.com/marcioshirai/nodejs-ex will be created
      * Use 'start-build' to trigger a new build
	--> Creating resources ...
	    buildconfig.build.openshift.io "nodejs-ex-pipeline" created
	--> Success
	    Build scheduled, use 'oc logs -f bc/nodejs-ex-pipeline' to track its progress.
	    Run 'oc status' to view your app.



curl -H "X-GitHub-Event: push" -H "Content-Type: application/json" -k -X POST --data-binary @payload.json https://192.168.0.201:8443/apis/build.openshift.io/v1/namespaces/nodejs-echo/buildconfigs/nodejs-ex-pipeline/webhooks/qT60YB7BZR3Q27WtUu2u/github



https://github.com/sclorg/nodejs-ex/blob/master/README.md


Creating initial project "myproject" ...
Server Information ...
OpenShift server started.

The server is accessible via web console at:
    https://127.0.0.1:8443

You are logged in as:
    User:     developer
    Password: <any value>

To login as administrator:
    oc login -u system:admin


oc new-app --name='cotd' --labels name='cotd' php~https://github.com/devops-with-openshift/cotd.git -e SELECTOR=cats





RED HAT JAVA S2I FOR OPENSHIFT
https://access.redhat.com/documentation/en-us/red_hat_jboss_middleware_for_openshift/3/html-single/red_hat_java_s2i_for_openshift/index

https://developers.redhat.com/blog/2017/02/23/getting-started-with-openshift-java-s2i/

https://blog.openshift.com/getting-started-with-jboss-web-server/



https://github.com/openshift/openshift-jee-sample



OK
WildFly
https://github.com/marcioshirai/openshift-jee-sample


------------------------
CI/CD PIPELINE OPENSHIFT
------------------------

Cross-Cluster Image Promotion Techniques
https://blog.openshift.com/cross-cluster-image-promotion-techniques/

Using JFrogâ€™s Artifactory and Red Hat OpenShift Together
https://blog.openshift.com/18333-2/

Protect Your Containerized Microservices on OpenShift Using JFrog Xray
https://jfrog.com/blog/protect-your-containerized-microservices-on-openshift-using-jfrog-xray/

Remotely Push and Pull Container Images to OpenShift
https://blog.openshift.com/remotely-push-pull-container-images-openshift/

# BALANCEAMENTO
Deploying OpenShift Applications to Multiple Datacenters
https://blog.openshift.com/deploying-openshift-applications-multiple-datacenters/

# REDHAT
Promoting Applications Across Environments
https://docs.openshift.com/container-platform/3.11/dev_guide/application_lifecycle/promoting_applications.html



DEPLOY

BUILD AND DEPLOYMENT OF JAVA APPLICATIONS ON OPENSHIFT CONTAINER PLATFORM 3
https://access.redhat.com/documentation/en-us/reference_architectures/2017/html-single/build_and_deployment_of_java_applications_on_openshift_container_platform_3/index#examples





OPENSHIFT ORIGIN 

https://github.com/openshift/origin/tree/master/examples/hello-openshift

https://github.com/openshiftdemos/os-sample-java-web

https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-one/



******************************************************
Promoting Applications Across Environments
******************************************************
https://docs.openshift.com/container-platform/3.11/dev_guide/application_lifecycle/promoting_applications.html



# ------------------------------------------------------------------------------------------------------
DOCKER
# ------------------------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------------------------
# DOWNLOAD DE IMAGEM DO OPENSHIFT DO PROJETO NODEJS-ECHO E UPLOAD NO DOCKER HUB
# ------------------------------------------------------------------------------------------------------

[root@vm-centos74 ~]# docker pull registry/nodejs-echo/nodejs-example:latest
Error response from daemon: pull access denied for registry/nodejs-echo/nodejs-example, repository does not exist or may require 'docker login': denied: requested access to the resource is denied

# docker login OK
docker login -u admin -p $(oc whoami -t) 172.30.1.1:5000/nodejs-echo/nodejs-example

	WARNING! Using --password via the CLI is insecure. Use --password-stdin.
	WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
	Configure a credential helper to remove this warning. See
	https://docs.docker.com/engine/reference/commandline/login/#credentials-store

docker images

docker pull 172.30.1.1:5000/nodejs-echo/nodejs-example
docker tag 172.30.1.1:5000/nodejs-echo/nodejs-example shirai/development:latest
docker push shirai/development:latest
docker run -p 8080:8080 -d shirai/development
curl -k localhost:8080


# ------------------------------------------------------------------------------------------------------
UPLOAD DE IMAGEM DO DOCKER HUB NO IMAGE STREAM NO OPENSHIFT PROJETO DEVELOPMENT
# ------------------------------------------------------------------------------------------------------
oc login https://192.168.0.201:8443 --token=HOUgRPiK-3HhVslRePD4gBSsBfnWSWa5Nk_fXLLyHKw
docker login -u admin -p $(oc whoami -t) 172.30.1.1:5000/development
docker tag shirai/development 172.30.1.1:5000/development/test1
docker push 172.30.1.1:5000/development/test1


# ------------------------------------------------------------------------------------------------------
# removendo toda app
# ------------------------------------------------------------------------------------------------------
# oc delete all -l <label>=<valor>
oc delete all -l app=marcio

# ------------------------------------------------------------------------------------------------------
# criando apps de templates
# ------------------------------------------------------------------------------------------------------
https://docs.okd.io/3.11/dev_guide/application_lifecycle/new_app.html

# ------------------------------------------------------------------------------------------------------
# usando o arquivo de template do nodejs exemplo
# ------------------------------------------------------------------------------------------------------
oc new-app -f nodejs.json

# ------------------------------------------------------------------------------------------------------
# criando a partir do template file e alterando parametro NAME
# ------------------------------------------------------------------------------------------------------
oc new-app -f nodejs.json -p NAME=new-name


# ------------------------------------------------------------------------------------------------------
# Template Parameters
# When creating an application based on a template, use the -p|--param argument to set parameter values defined by the template:
# ------------------------------------------------------------------------------------------------------
oc new-app ruby-helloworld-sample \
   -p ADMIN_USERNAME=admin -p ADMIN_PASSWORD=mypassword

# ------------------------------------------------------------------------------------------------------
# You can store your parameters in a file, then use that file with --param-file when instantiating 
# a template. If you want to read the parameters from standard input, use --param-file=-:
# ------------------------------------------------------------------------------------------------------

$ cat helloworld.params
ADMIN_USERNAME=admin
ADMIN_PASSWORD=mypassword

$ oc new-app ruby-helloworld-sample --param-file=helloworld.params
$ cat helloworld.params | oc new-app ruby-helloworld-sample --param-file=-

# ------------------------------------------------------------------------------------------------------
# mostrar os parametros do template
# ------------------------------------------------------------------------------------------------------
oc process --parameters -f nodejs.json


# ------------------------------------------------------------------------------------------------------
# SPECIFYING ENVIRONMENT VARIABLES
# ------------------------------------------------------------------------------------------------------
# When generating applications from a template, source, or an image, you can use the -e|--env argument to 
# pass environment variables to the application container at run time:

$ oc new-app openshift/postgresql-92-centos7 \
    -e POSTGRESQL_USER=user \
    -e POSTGRESQL_DATABASE=db \
    -e POSTGRESQL_PASSWORD=password
The variables can also be read from file using the --env-file argument:

$ cat postgresql.env
POSTGRESQL_USER=user
POSTGRESQL_DATABASE=db
POSTGRESQL_PASSWORD=password
$ oc new-app openshift/postgresql-92-centos7 --env-file=postgresql.env
Additionally, environment variables can be given on standard input by using --env-file=-:

$ cat postgresql.env | oc new-app openshift/postgresql-92-centos7 --env-file=-


# ------------------------------------------------------------------------------------------------------
# Part 2: Creating a Template â€“ A Technical Walkthrough
# ------------------------------------------------------------------------------------------------------
https://blog.openshift.com/part-2-creating-a-template-a-technical-walkthrough/

# explicando template, onde tem o comando delete e a estrutura
http://v1.uncontained.io/playbooks/fundamentals/template_development_guide.html

https://docs.openshift.com/container-platform/3.11/dev_guide/templates.html#writing-templates

# ------------------------------------------------------------------------------------------------------
# EXPORT PARA TEMPLATE DE UM OBJETO
# ------------------------------------------------------------------------------------------------------
oc export dc teste --as-template='aa'
ou 
oc get --export  dc teste -o yaml




# ------------------------------------------------------------------------------------------------------
# GIT
# ------------------------------------------------------------------------------------------------------
git add .
git commit -m 'mensagem'
git push origin master



# ------------------------------------------------------------------------------------------------------
# STEP BY STEP - ESTEIRA CD SOMENTE DEPLOY COM ARQUIVO DE PARAMETROS
# ------------------------------------------------------------------------------------------------------

# login no openshift e selecionar projeto
oc login https://192.168.0.201:8443 --token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
oc project development

# remover todas as configuracoes no projeto por label 
oc delete all -l app=marcio

# step 1 - criando aplicacao atraves de template sem build usando parametro
# parametro do nome da app e que sera usada nas labels tambem
# template tambem nao tem trigger para configchange
# primeira vez nao tera pods por nao ter container ainda

# criando app atraves de file (necessario clonar repositorio antes ou disponibilizar arquivo local)
oc new-app -f nodejs.json -p NAME=marcio

# ou criar diretamente do git 
oc new-app -f https://raw.githubusercontent.com/marcioshirai/nodejs-ex/master/openshift/templates/nodejs-cd-basic.json -p NAME=marcio

# listar o dc para confirmar criacao
oc describe deploymentconfig marcio

# publicar imagem no projeto destino do openshift
docker login -u admin -p $(oc whoami -t) 172.30.1.1:5000/development/marcio
docker tag shirai/development 172.30.1.1:5000/development/marcio:latest
docker push 172.30.1.1:5000/development/marcio:latest




